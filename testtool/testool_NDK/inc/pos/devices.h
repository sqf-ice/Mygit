/*
 * FileName:       
 * Author:         zhangnw  Version: 1.6.11  Date: 2008-12-24
 * Description:    
 * Version:        
 * Function List:  
 *                 1.
 * History:        
 *     <author>   <time>    <version>  <desc>
 */
#ifndef DEVICES_H
#define DEVICES_H

/*-----------------------includes-------------------------------*/
#include "mode.h"	//"typedef.h"

/*---------------constants/macro definition---------------------*/
#define	DEVICE_PP60PT				(0x00)
#define	DEVICE_PP60RF				(0x01)
#define	DEVICE_PP60_1				(0x01)
#define	DEVICE_PP60_2				(0x02)
//以下是PP60使用的BPS,与POS的BPS不一致
#define	PP60_BPS_SELFADAPT			(0x00)
#define	PP60_BPS1200				(0x01)
#define	PP60_BPS2400				(0x02)
#define	PP60_BPS4800				(0x03)
#define	PP60_BPS9600				(0x04)
#define	PP60_BPS14400				(0x05)
#define	PP60_BPS19200				(0x06)
#define	PP60_BPS38400				(0x07)
#define	PP60_BPS57600				(0x08)

#define	PP60_OFFSET_HEAD			(0)
#define	PP60_LEN_HEAD				(1)
#define	PP60_OFFSET_CMD				(PP60_OFFSET_HEAD+PP60_LEN_HEAD)
#define	PP60_LEN_CMD				(1)
#define	PP60_OFFSET_DATA			(PP60_OFFSET_CMD+PP60_LEN_CMD)
#define	PP60_TAIL					("\x0d\x0a")
#define	PP60_LEN_TAIL				2	//strlen(PP60_TAIL)
#define	PP60_MAXLEN_DATA			(768)//(512)	//(PP60_MAXLEN_FRAME-PP60_LEN_HEAD-PP60_LEN_CMD-PP60_LEN_TAIL)	//根据协议文档
#define	PP60_MAXLEN_FRAME			(PP60_MAXLEN_DATA+PP60_LEN_HEAD+PP60_LEN_CMD+PP60_LEN_TAIL)	//(512)	//(MAXLEN_DATA+8)
#define	PP60_TIMEOUT_BASE			(20)	//按最低BPS300来算MAXLEN_DATA/30,故定为20
#define	PP60_TIMEOUT_MAX			(300)

#define PP60_SM4FLAG				(0x32)
#define	PP60_TDESFLAG				(0x31)
#define	PP60_DESFLAG				(0x30)	//自定义,非文档规定
#define	PP60_NODESFLAG				(0x00)	//自定义,非文档规定

#define	PP60_SN						("abcdefghijklmnopqrstuvwx")

#define	PP60_SUCC					(0xAA)
#define	PP60_FAIL					(0x55)
#define PP60_ERR                    (0xFF)

#define	PP60_CMDA_RCVLEN			(1)
#define	PP60_CMDB_RCVLEN			(1)
#define	PP60_CMDb_RCVLEN			(1)
#define	PP60_CMDC_RCVLEN			(1)
#define	PP60_CMDD_RCVLEN			(1)
#define	PP60_CMDE_RCVLEN			(1)
#define	PP60_CIPHERRSP_HEAD			(0x02)
#define	PP60_CIPHERRSP_LEN			(0x10) //for DES
#define PP60_SM4_CIPHERRSP_LEN		(0x20)	//for SM4
#define	PP60_CMDF_RCVLEN			(2+32*2)	//(2+PP60_CIPHERRSP_LEN)//按最大的估计
#define	PP60_CMDG_RCVLEN			(2+32*2)	//(2+PP60_CIPHERRSP_LEN)//按最大的估计
#define	PP60_CMDH_LS				(0x10)	//CMDH正常应送这个LS // for DES
#define PP60_SM4_CMDH_LS			(0x20)	// for SM4
#define	PP60_CMDH0_RCVLEN			(1)
//#define	PP60_CMDH1_RCVLEN		(2+PP60_CIPHERRSP_LEN)	//(18)
#define	PP60_CARDNOLEN				(12)
#define	PP60_CMDI_RCVLEN			(2+PP60_CIPHERRSP_LEN)
#define PP60_CMDI_SM4_RCVLEN		(2+PP60_SM4_CIPHERRSP_LEN) //for SM4
#define	PP60_CMDX_RCVLEN			PP60_CMDI_RCVLEN
#define PP60_CMDX_SM4_RCVLEN		PP60_CMDI_SM4_RCVLEN	//for SM4
#define	PP60_CMDJ_RCVLEN			(2+PP60_CIPHERRSP_LEN)
#define PP60_CMDJ_SM4_RCVLEN		(2+PP60_SM4_CIPHERRSP_LEN) //for SM4
#define	PP60_LEN_PINBLOCK			(8) // for DES
#define PP60_SM4_LEN_PINBLOCK		(16) // for SM4
#define	PP60_CMDK_STRLEN			(0x10) //for DES
#define PP60_CMDK_SM4_STRLEN		(0x20)
#define	PP60_CMDK_RCVLEN			(2+PP60_CIPHERRSP_LEN)
#define PP60_CMDK_SM4_RCVLEN		(2+PP60_SM4_CIPHERRSP_LEN) //for SM4
#define	PP60_CMDL_RCVLEN			(1)
#define	PP60_CMDM_RCVLEN			(1)
#define	PP60_CMDN_RCVLEN			(1)
#define	PP60_CMDP_RCVLEN			(1)
#define	PP60_CMDQ_RCVLEN			(1)
#define	PP60_CMDR_RCVLEN			(1)
#define	PP60_CMDS_RCVLEN			(1)
#define	PP60_CMDT_RCVLEN			(2+PP60_CIPHERRSP_LEN)
#define PP60_CMDT_SM4_RCVLEN		(2+PP60_SM4_CIPHERRSP_LEN) //for SM4
#define	PP60_CMDU_RCVLEN			(1)
#define	PP60_CMDW_RCVLEN			(1)
#define	PP60_CMDZ_RCVLEN			(1)
#define	PP60_CMDx1_RCVLEN			(1)
#define	PP60_CMDh_RCVLEN			(1)

#define	PP60_CODE_BASE				('A')	//(0x41)
#define	PP60_CODE_MASK_L			(0x0000000f)	//做MASK的数不要使用0x0f,而要把高位明确出来
#define	PP60_CODE_L(a)				(((a)&PP60_CODE_MASK_L)+PP60_CODE_BASE)//位运算优先级比+,-低
#define	PP60_CODE_MASK_H			(0x000000f0)
#define	PP60_CODE_H(a)				((((a)&PP60_CODE_MASK_H)>>4)+PP60_CODE_BASE)//移位优先级比+,-低
#define	PP60_DECODE(h, l)			(((((h)-PP60_CODE_BASE)<<4)&PP60_CODE_MASK_H)+(((l)-PP60_CODE_BASE)&PP60_CODE_MASK_L))//位运算优先级比+,-低

//定义命令接口层的错误码
#define	PP60_ERR_CMD_BASE			(0x1c00)//(-6000)
#define	PP60_ERR_CODE				(0x1cff)
#define	PP60_ERR_DECODE				PP60_ERR_CODE	//(0x1cff)

#define	DEVICE_NL829LCD				(0x00)	//指旧的有带LCD的机器
#define	DEVICE_NL829MR_PP60RF		(0x01)	//指829MR或PP60RF,即不带LCD的射频机
#define	DEVICE_YH100				(0x02)	//指YH100,即不带LCD,LED灯,蜂鸣器,用USB口的设备
//#define	NL829_2BYTESTOUSHORT(addr0)	(((*(uchar *)(addr0)<<8)&0x0000ff00)|((*((uchar *)(addr0)+1))&0x000000ff))	//注意一些编译器的uchar与char是一样的,这在移位时会引起问题,故无需转成ushort型,直接&0x0000ffff即可
#define	NL829_2BYTESTOUSHORT		SMART_GETSW
#define	NL829_GETSTAVAL				NL829_2BYTESTOUSHORT

//以下是邋NL829使用的BPS,与POS的BPS不一致
#define	NL829_BPS9600				(0x00)
#define	NL829_BPS19200				(0x01)
#define	NL829_BPS38400				(0x02)
#define	NL829_BPS57600				(0x03)
#define	NL829_BPS115200				(0x04)
#define	NL829_BPS_DEFAULT			NL829_BPS57600	//开机总是默认它

//NL829系列命令帧的一些定义(为了不与m-1.h的定义重复,本文件特有的宏定义原则上应以NL829_开头)
//NL829_OFFSET_xxx,NL829_LEN_xxx
#define	NL829_OFFSET_STX			(0)
#define	NL829_LEN_STX				(1)
#define	NL829_OFFSET_DATALEN		(NL829_OFFSET_STX+NL829_LEN_STX)	//(1)
#define	NL829_LEN_DATALEN			(2)
#define	NL829_OFFSET_DATA			(NL829_OFFSET_DATALEN+NL829_LEN_DATALEN)	//(3)
#define	NL829_LEN_CMD				(2)
#define	NL829_LEN_LRC				(1)
#define	NL829_LEN_ETX				(1)
#define	NL829_LEN_FRAMEHEAD			(NL829_LEN_STX+NL829_LEN_DATALEN)	//NL829_OFFSET_DATA
#define	NL829_LEN_FRAMETAIL			(NL829_LEN_LRC+NL829_LEN_ETX)	//(2)
#define	NL829_OFFSET_ARGS			NL829_LEN_CMD	//这里的参数偏移是相对于data域而言的,而非在frame域中的偏移
#define	NL829_LEN_STATUS			(2)
#define	NL829_MAXLEN_DATA			PP60_MAXLEN_DATA	//需要根据PP60_MAXLEN_DATA同步调整,因为829可以转发PP60命令,缓冲要比PP60更大些	//(512)	//(NL829_MAXLEN_FRAME-NL829_LEN_FRAMEHEAD-NL829_LEN_FRAMETAIL)	//根据协议文档
#define	NL829_MAXLEN_FRAME			(NL829_MAXLEN_DATA+NL829_LEN_FRAMEHEAD+NL829_LEN_FRAMETAIL)	//(512)	//(MAXLEN_DATA+8)
#define	NL829_TIMEOUT_BASE			(20)	//按最低BPS300来算MAXLEN_DATA/30,故定为20,但这个时间只考虑传输时间,未考虑外设其它运算的时间
#define	NL829_LEN_UID				LEN_UID
#define	NL829_LEN_KEY				LEN_KEY
#define	NL829_LEN_SNR				NL829_LEN_UID
#define	NL829_LEN_SAK				LEN_SAK			//注意:并不确定是多长,只是定义最大长度而已
#define	NL829_LEN_ATQ				LEN_ATQA		//注意:并不确定是多长,只是定义最大长度而已
#define	NL829_LEN_BLKDATA			LEN_BLKDATA
#define	NL829_LEN_BLKINCDEC			LEN_BLKINCDEC
#define NL829_LEN_KEY_INPUT			(24)
//NL829系列状态码(ushort型)
#define	NL829_SUCC					(0x0000)
#define NL829_ANIMATION_CLOSE       (0x0000)    //动画关闭
#define NL829_ERR_ANIMATION         (0xfffe)    //动画张数和要显示图片总数不符
#define NL829_NOEXIT_ANIMATION      (0xfffd)    //要显示的图片中有不存在的
#define	NL829_FAIL					(0xffff)
#define NL829_ANIMATION_OPEN        (0x0001)    //动画开启
#define	NL829_ARGERR				(0x0001)	//各命令的错误参数情况尽量统一到这个宏来
#define	NL829_BPS_NOTSUPPORT		(0x0001)
#define	NL829_LED_NONE				(0x0001)
#define	NL829LCD_LCD_NONE			(0x0001)
#define	NL829SCAN_TIMEOUT			(0x0001)
#define	NL829SCAN_SCANING			(0x0001)
#define	NL829LCD_LCD_FMTERR			(0x0002)
#define NL829_CPU_ACTIVE_INPUT_SUCC	(0xaa00)
//#define	NL829_HWINFO_ARGERR		NL829_ARGERR	//(0x0001)
#define	NL829_HWINFO_ERR			(0x0002)
#define	NL829_NOTSUPPORTTOUCH		(0x1001)
#define	NL829_REACTIVE				(0x3000)
#define	NL829_NOTACTIVE				(0x3004)
#define	NL829_OTHERERR				(0x3005)
#define	NL829_TIMEOUT				(0x3006)
#define	NL829_DATAERR				(0x3007)
#define	NL829_MULCARD				(0x3009)
#define	NL829_RC531ERR				(0x3010)
#define	NL829_FAIL_REQUEST			(0x3001)
#define	NL829_FAIL_ANTICOLL			(0x3002)
#define	NL829_FAIL_SELECT			(0x3003)
#define	NL829_FAIL_HALT				(0x3001)
#define	NL829_M1_NOTAGERR			(0x30ff)
#define	NL829_M1_AUTHERR			(0x30fc)
#define	NL829_M1_NOTAUTHERR			(0x30f6)
//#define	NL829_SAM_CMDERR			NL829_ARGERR	//(0x0001)
#define	NL829_SAM_NOTPOWERON		(0x2004)
#define	NL829_SAM_FAIL_POWERON		(0x2005)
#define	NL829_SAM_OTHERERR			(0x2007)
#define	NL829_CPU_SUCC				(0x9000)	//包括CPU射频及CPU的SAM
#define	NL829_PP60_SUCC				NL829_SUCC
#define	NL829_PP60_FAIL				NL829_FAIL
#define	NL829_PP60_ARGERR			NL829_ARGERR	//(0x0001)
#define	NL829_PP60_FAIL_SEND		(0x0002)
#define	NL829_PP60_NOTSUPPORT		(0x4001)
#define	NL829_PP60_FAIL_COMM		(0x4002)
//以下NL829命令定义根据设计文档规定
#define	NL829_SETBPS						("\x30\x01")
#define	NL829_SETBPS_DATALEN_SND			(NL829_LEN_CMD+1)
#define	NL829_SETBPS_APPLEN_RCV				(0)
#define	NL829_GETBIOSVER					("\x31\x10")
#define	NL829_GETBIOSVER_DATALEN_SND		(NL829_LEN_CMD)
#define	NL829_BEEP							("\x31\x13")
#define	NL829_BEEP_DATALEN_SND				(NL829_LEN_CMD+3)
#define	NL829_BEEP_APPLEN_RCV				(0)
#define	NL829_LEDCTL						("\x31\x14")
#define	NL829_LEDCTL_DATALEN_SND			(NL829_LEN_CMD+1)
#define	NL829_LEDCTL_APPLEN_RCV				(0)
//新增加LED非常阻塞闪烁控制\x31\x16   linwl 20120220
#define	NL829_LEDCTLT						("\x31\x16")
#define	NL829_LEDCTLT_DATALEN_SND			(NL829_LEN_CMD+1)
#define	NL829_LEDCTLT_APPLEN_RCV			(0)
#define	NL829_LCDCTL						("\x31\x15")
#define	NL829_LCDCTL_DATALEN_SND			(NL829_LEN_CMD+9)
#define	NL829_LCDCTL_APPLEN_RCV				(0)
//新增SP10扫描头扫码测试用例\0x31\0x17 linwl 20161214
#define	NL829_SCAN_STARTSCAN				("\x31\x17")
#define	NL829_SCANSTARTSCAN_DATALEN_SND		(NL829_LEN_CMD)
#define	NL829_SCANSTARTSCAN_APPLEN_RCV		(0)
#define	NL829_SCAN_STOPSCAN					("\x31\x19")
#define	NL829_SCANSTOPSCAN_DATALEN_SND		(NL829_LEN_CMD)
#define	NL829_SCANSTOPSCAN_APPLEN_RCV		(0)
#define	NL829_SCAN_GETDATA					("\x31\x18")
#define	NL829_SCANGETDATA_DATALEN_SND		(NL829_LEN_CMD)
//#define	NL829_SCANGETDATA_APPLEN_RCV	(0)//实际扫描到的数据长度不确定,所以无法确定预期附加数据长度
#define	NL829_SCAN_DOSCAN					("\x31\x22")
#define	NL829_SCANDOSCAN_DATALEN_SND		(NL829_LEN_CMD+1)
//#define	NL829_SCANDOSCAN_APPLEN_RCV		(0)//实际扫描到的数据长度不确定,所以无法确定预期附加数据长度
#define	NL829_SCAN_SETSCAN					("\x31\x23")
#define	NL829_SCANSETSCAN_DATALEN_SND		(NL829_LEN_CMD+9)
#define	NL829_SCANSETSCAN_APPLEN_RCV		(7)
//新增加载与显示图片
#define   NL829_SHOW_IMAGE					("\x31\x24")
#define	NL829_SHOWIMAGE_DATALEN_SND		(NL829_LEN_CMD+12)
#define	NL829_SHOWIMAGE_APPLEN_RCV		(0)
//新增获取按键相关的三个指令20170804
#define NL829_STR_REC_KEY					("\x31\x25")
#define NL829_STR_REC_KEY_DATALEN_SND		(NL829_LEN_CMD)
#define NL829_STR_REC_KEY_APPLEN_RCV		(0)
#define NL829_GET_KEY_VALUE					("\x31\x26")
#define NL829_GET_KEY_VALUE_DATALEN_SND	(NL829_LEN_CMD)
#define NL829_END_REC_KEY					("\x31\x27")
#define NL829_END_REC_KEY_DATALEN_SND		(NL829_LEN_CMD)
#define NL829_END_REC_KEY_APPLEN_RCV		(0)
//新增扫描动画\x31\x28
#define NL829_SCAN_ANIMATION                ("\x31\x28")
#define NL829_SCAN_ANIMATION_DATALEN_SND    (NL829_LEN_CMD+5)
#define NL829_SCAN_ANIMATION_APPLEN_RCV     (0)

//新的硬件下载/读取命令定义
#define	NL829_SETHWINFO						("\x31\x20")
#define	NL829_SETHWINFO_CHECK				("MINI829")
#define	NL829_FLAG_SN						(0x00)
#define	NL829_FLAG_MACHINE					(0x01)
#define	NL829_HWINFO						("0123456789ABCDEF")
#define	NL829_SETHWINFO_APPLEN_RCV			(0)
#define	NL829_GETHWINFO						("\x31\x21")
#define	NL829_GETHWINFO_CHECK				NL829_SETHWINFO_CHECK	//("MINI829")
#define	NL829_GETHWINFO_DATALEN_SND			(NL829_LEN_CMD+strlen(NL829_GETHWINFO_CHECK)+1)
//旧的硬件(命名为NL829LCD,虽然它可以不带LCD)下载/读取命令定义
#define	NL829LCD_HWINFO						("\x31\x20")
#define	NL829LCD_HWINFO_CHECK				("NL829")
#define	NL829LCD_FLAG_SETSN					(0x00)
#define	NL829LCD_FLAG_GETMACHINE			(0x01)
#define	NL829LCD_FLAG_GETMERCHANT			(0x02)
#define	NL829LCD_HWINFO_DATALEN_SND			(NL829_LEN_CMD+strlen(NL829LCD_HWINFO_CHECK)+1)
#define	NL829LCD_GETRTC						("\x31\x22")
#define	NL829LCD_GETRTC_DATALEN_SND			(NL829_LEN_CMD)
#define	NL829LCD_GETRTC_APPLEN_RCV			(8)
#define	NL829LCD_SETRTC						("\x31\x23")
//#define	NL829LCD_SETRTC_DATALEN_SND		(NL829_LEN_CMD+8)
#define	NL829LCD_SETRTC_APPLEN_RCV			(0)
#define	NL829_CARDNO_IC1					(0x01)
#define	NL829_CARDNO_SAM1					(0x10)
#define	NL829_CARDNO_SAM2					(0x11)
#define	NL829_CARDNO_SAM3					(0x12)
#define	NL829_CARDNO_SAM4					(0x13)
#define	NL829_CARDNO_RFID					(0xff)
#define	NL829_CARD_T0						(0x00)
#define	NL829_CARD_T1						(0x01)
#define	NL829_ICSAM_GETSTA					("\x32\x21")
#define	NL829_ICSAM_GETSTA_DATALEN_SND		(NL829_LEN_CMD)
#define	NL829_ICSAM_GETSTA_APPLEN_RCV		(1)
#define	NL829_ICSAM_GETSTA_MASK(byte)		((byte)&0xf3)	//忽略bit2,bit3
#define	NL829_ICSAM_POWERON					("\x32\x22")
#define	NL829_ICSAM_POWERON_RESERVED		("\x00\x00\x00")
#define	NL829_ICSAM_POWERON_RESERVED_LEN	(3)
#define	NL829_ICSAM_POWERON_DATALEN_SND		(NL829_LEN_CMD+NL829_ICSAM_POWERON_RESERVED_LEN+1)
#define	NL829_ICSAM_POWERDOWN				("\x32\x23")
#define	NL829_ICSAM_POWERDOWN_DATALEN_SND	(NL829_LEN_CMD+1)
#define	NL829_ICSAM_POWERDOWN_DATALEN_RCV	(0)
#define	NL829_CPU_ACTIVE					("\x32\x24")
#define	NL829_CPU_ACTIVE_DATALEN_SND		(NL829_LEN_CMD+2)
#define	NL829_CPU_DISCNNT					("\x32\x25")
#define	NL829_CPU_DISCNNT_DATALEN_SND		(NL829_LEN_CMD+2)
#define	NL829_CPU_DISCNNT_APPLEN_RCV		(0)
#define	NL829_APDURW						("\x32\x26")
#define	NL829_ANTENNACTL					("\x32\x27")
#define	NL829_ANTENNACTL_DATALEN_SND		(NL829_LEN_CMD+2)
#define	NL829_RFIDTYPEARATS					("\x32\x28")
#define	NL829_RFIDTYPEARATS_DATALEN_SND		(NL829_LEN_CMD+1)	
#define	NL829_CPU_ACTIVE_KEY_INPUT			("\x32\x29")
#define	NL829_CPU_ACTIVE_KEY_INPUT_DATALEN	(NL829_LEN_CMD+2)
#define	NL829_ANTENNACTL_APPLEN_RCV			(0)
#define	NL829_M1_ACTIVE						("\x33\x21")
#define	NL829_M1_ACTIVE_DATALEN_SND			(NL829_LEN_CMD+3)
#define	NL829_M1_HALT						("\x33\x22")
#define	NL829_M1_HALT_DATALEN_SND			(NL829_LEN_CMD)
#define	NL829_M1_HALT_APPLEN_RCV			(0)
#define	NL829_M1_STOREKEY					("\x33\x23")
#define	NL829_M1_STOREKEY_DATALEN_SND		(NL829_LEN_CMD+NL829_LEN_KEY+2)
#define	NL829_M1_STOREKEY_APPLEN_RCV		(0)
#define	NL829_M1_LOADKEY					("\x33\x24")
#define	NL829_M1_LOADKEY_DATALEN_SND		(NL829_LEN_CMD+2)
#define	NL829_M1_LOADKEY_APPLEN_RCV			(0)
#define	NL829_M1_AUTH						("\x33\x25")
#define	NL829_M1_AUTH_DATALEN_SND			(NL829_LEN_CMD+NL829_LEN_SNR+2)
#define	NL829_M1_AUTH_APPLEN_RCV			(0)
#define	NL829_M1_AUTH_EX					("\x33\x26")
#define	NL829_M1_AUTH_EX_DATALEN_SND		(NL829_LEN_CMD+NL829_LEN_SNR+NL829_LEN_KEY+2)
#define	NL829_M1_AUTH_EX_APPLEN_RCV			(0)
#define	NL829_M1_BLKREAD					("\x33\x27")
#define	NL829_M1_BLKREAD_DATALEN_SND		(NL829_LEN_CMD+1)
#define	NL829_M1_BLKREAD_APPLEN_RCV			NL829_LEN_BLKDATA
#define	NL829_M1_BLKWRITE					("\x33\x28")
#define	NL829_M1_BLKWRITE_DATALEN_SND		(NL829_LEN_CMD+NL829_LEN_BLKDATA+1)
#define	NL829_M1_BLKWRITE_APPLEN_RCV		(0)
#define	NL829_M1_BLKINCDEC_H				(0x33)
#define	NL829_M1_BLKINC_L					(0x29)
#define	NL829_M1_BLKDEC_L					(0x2a)
#define	NL829_M1_BLKINCDEC_DATALEN_SND		(NL829_LEN_CMD+NL829_LEN_BLKINCDEC+1)
#define	NL829_M1_BLKINCDEC_APPLEN_RCV		(0)
#define	NL829_M1_BLKTRANSREST_H				(0x33)
#define	NL829_M1_BLKTRANS_L					(0x2b)
#define	NL829_M1_BLKREST_L					(0x2c)
#define	NL829_M1_BLKTRANSREST_DATALEN_SND	(NL829_LEN_CMD+1)
#define	NL829_M1_BLKTRANSREST_APPLEN_RCV	(0)
#define	NL829_PP60_PACKCMD					("\xc0\x01")
#define	NL829_PP60_PACKCMD_APPLEN_RCV		(2)
#define	NL829_PP60_GETRSP					("\xc0\x02")
#define	NL829_PP60_GETRSP_DATALEN_SND		(NL829_LEN_CMD+4)
#define	NL829_PP60_SETBPS					("\xc0\x03")
#define	NL829_PP60_SETBPS_DATALEN_SND		(NL829_LEN_CMD+2)
#define	NL829_PP60_CNNT						("\xc0\x03")
#define	NL829_PP60_CNNT_DATA				("\x03\x00")	//自适应判断与PP60-1的BPS
#define	NL829_PP60_CNNT_DATALEN_SND			(NL829_LEN_CMD+2)
//定义命令层一些参数
#define	NL829_M1_REQA						(0x26)
#define	NL829_M1_WUPA						(0x52)	//推荐值
#define	NL829_TYPE_A						(0x0A)
#define	NL829_TYPE_B						(0x0B)
#define	NL829_AUTHKEY_TYPE_A				AUTHKEY_TYPE_A
#define	NL829_AUTHKEY_TYPE_B				AUTHKEY_TYPE_B	
#define	NL829_AUTHKEY_TYPE_A1				AUTHKEY_TYPE_A1
#define	NL829_AUTHKEY_TYPE_B1				AUTHKEY_TYPE_B1
#define	NL829_AUTHKEY						AUTHKEY
#define	NL829_BLK02DATA_FF					BLK02DATA_FF
#define	NL829_BLK02DATA_ORI					BLK02DATA_ORI
#define	NL829_BLK02DATA_INC1				BLK02DATA_INC1
//应用层扩展了返回状态码
//定义帧层收发的错误码
#define	NL829_ERR_FRAME_BASE		(0x1a00)//(-5000)	//不与底层已定义的错误返回码冲突
//不定义NL829_ERR_FRAME_RCV,而是将各种具体接收错误具体定义出来
#define	NL829_ERR_FRAME_STX			(NL829_ERR_FRAME_BASE+0x01)
#define	NL829_ERR_FRAME_DATALEN1	(NL829_ERR_FRAME_BASE+0x02)
#define	NL829_ERR_FRAME_DATALEN2	(NL829_ERR_FRAME_BASE+0x03)	//表征DATALEN太小或太大
#define	NL829_ERR_FRAME_DATA		(NL829_ERR_FRAME_BASE+0x04)
#define	NL829_ERR_FRAME_LRC			(NL829_ERR_FRAME_BASE+0x05)
#define	NL829_ERR_FRAME_ETX			(NL829_ERR_FRAME_BASE+0x06)
#define	NL829_ERR_FRAME_SND			(NL829_ERR_FRAME_BASE+0x07)
#define	NL829_ERR_FRAME_UNPACK		(NL829_ERR_FRAME_BASE+0x08)
#define	PP60_ERR_FRAME1				(NL829_ERR_FRAME_BASE+0x09)
#define	PP60_ERR_FRAME2				(NL829_ERR_FRAME_BASE+0x0a)
#define	PP60_ERR_FRAME3				(NL829_ERR_FRAME_BASE+0x0b)
#define	PP60_ERR_FRAME_SND			(NL829_ERR_FRAME_BASE+0x0c)
//定义命令接口层的错误码
//关于错误码的定义:其实不同函数的错误码是可以相同的,但完全不同的错误码可以直接定位到出错之处(因为调用者并不知道此时调用的是哪个函数)
#define	NL829_ERR_CMD_BASE			(0x1b00)//(-6000)
#define	NL829_ERR_CMD_SETBPS		(NL829_ERR_CMD_BASE+0x01)
#define	NL829_ERR_CMD_BEEP			(NL829_ERR_CMD_BASE+0x02)
#define	NL829_ERR_CMD_LEDCTL		(NL829_ERR_CMD_BASE+0x03)
#define	NL829_ERR_CMD_LCDCTL		(NL829_ERR_CMD_BASE+0x04)
#define	NL829_ERR_CMD_SETHWINFO		(NL829_ERR_CMD_BASE+0x05)
#define	NL829_ERR_CPU_ACTIVE		(NL829_ERR_CMD_BASE+0x06)
#define	NL829_ERR_CPU_ACTIVE1		(NL829_ERR_CMD_BASE+0x07)
#define	NL829_ERR_CPU_DISCNNT		(NL829_ERR_CMD_BASE+0x08)
#define	NL829_ERR_APDURW			(NL829_ERR_CMD_BASE+0x09)
#define	NL829_ERR_ANTENNACTL		(NL829_ERR_CMD_BASE+0x0a)
#define	NL829_ERR_M1_ACTIVE			(NL829_ERR_CMD_BASE+0x0b)
#define	NL829_ERR_M1_ACTIVE1		(NL829_ERR_CMD_BASE+0x0c)
#define	NL829_ERR_M1_HALT			(NL829_ERR_CMD_BASE+0x0d)
#define	NL829_ERR_M1_STOREKEY		(NL829_ERR_CMD_BASE+0x0e)
#define	NL829_ERR_M1_LOADKEY		(NL829_ERR_CMD_BASE+0x0f)
#define	NL829_ERR_M1_AUTH			(NL829_ERR_CMD_BASE+0x10)
#define	NL829_ERR_M1_AUTH_EX		(NL829_ERR_CMD_BASE+0x11)
#define	NL829_ERR_M1_BLKREAD		(NL829_ERR_CMD_BASE+0x12)
#define	NL829_ERR_M1_BLKREAD1		(NL829_ERR_CMD_BASE+0x13)
#define	NL829_ERR_M1_BLKWRITE		(NL829_ERR_CMD_BASE+0x14)
#define	NL829_ERR_M1_BLKINCDEC		(NL829_ERR_CMD_BASE+0x15)
#define	NL829_ERR_M1_BLKTRANSREST	(NL829_ERR_CMD_BASE+0x16)
#define	NL829_ERR_ICSAM_POWERON		(NL829_ERR_CMD_BASE+0x17)
#define	NL829_ERR_ICSAM_POWERON1	(NL829_ERR_CMD_BASE+0x18)
#define	NL829_ERR_ICSAM_POWERON2	(NL829_ERR_CMD_BASE+0x19)
#define	NL829_ERR_ICSAM_POWERDOWN	(NL829_ERR_CMD_BASE+0x1a)
#define	NL829_ERR_PP60_PACKCMD		(NL829_ERR_CMD_BASE+0x1b)
#define	NL829_ERR_PP60_PACKCMD1		(NL829_ERR_CMD_BASE+0x1c)
#define	NL829_ERR_PP60_GETRSP		(NL829_ERR_CMD_BASE+0x1d)
#define	NL829_ERR_PP60_GETRSP1		(NL829_ERR_CMD_BASE+0x1e)
#define	NL829_ERR_PP60_GETRSP2		(NL829_ERR_CMD_BASE+0x1f)
#define	NL829_ERR_PP60_GETRSP3		(NL829_ERR_CMD_BASE+0x20)
#define	NL829_ERR_PP60_SETBPS		(NL829_ERR_CMD_BASE+0x21)
#define	NL829_ERR_PP60_SETBPS1		(NL829_ERR_CMD_BASE+0x22)
#define	NL829_ERR_PP60_SETBPS2		(NL829_ERR_CMD_BASE+0x23)
#define	NL829_ERR_CMD_GETHWINFO		(NL829_ERR_CMD_BASE+0x24)
#define	NL829_ERR_CMD_GETHWINFO1	(NL829_ERR_CMD_BASE+0x25)
#define	NL829_ERR_PP60_CNNT			(NL829_ERR_CMD_BASE+0x26)
#define	NL829_ERR_PP60_CNNT1		(NL829_ERR_CMD_BASE+0x27)
#define	NL829_ERR_PP60_CNNT2		(NL829_ERR_CMD_BASE+0x28)
#define	NL829_ERR_CMD_GETBIOSVER	(NL829_ERR_CMD_BASE+0x29)
#define	NL829LCD_ERR_CMD_HWINFO		(NL829_ERR_CMD_BASE+0x30)
#define	NL829LCD_ERR_CMD_HWINFO1	(NL829_ERR_CMD_BASE+0x31)
#define	NL829LCD_ERR_CMD_GETRTC		(NL829_ERR_CMD_BASE+0x32)
#define	NL829LCD_ERR_CMD_SETRTC		(NL829_ERR_CMD_BASE+0x33)
#define	NL829_ERR_ICSAM_GETSTA		(NL829_ERR_CMD_BASE+0x34)
#define	NL829_ERR_ICSAM_GETSTA1		(NL829_ERR_CMD_BASE+0x35)
#define	NL829_ERR_CMD_LEDCTLT		(NL829_ERR_CMD_BASE+0x36)
#define	NL829_ERR_SCAN_START		(NL829_ERR_CMD_BASE+0x37)
#define	NL829_ERR_SCAN_GETDATA		(NL829_ERR_CMD_BASE+0x38)
#define	NL829_ERR_SCAN_STOP			(NL829_ERR_CMD_BASE+0x39)
#define	NL829_ERR_SCAN_DOSCAN		(NL829_ERR_CMD_BASE+0x40)
#define	NL829_ERR_SCAN_SETSCAN		(NL829_ERR_CMD_BASE+0x41)
#define	NL829_ERR_SHOW_IMAGE		(NL829_ERR_CMD_BASE+0x42)
#define	NL829_ERR_STR_REC_KEY		(NL829_ERR_CMD_BASE+0x43)
#define	NL829_ERR_GET_KEY_VALUE		(NL829_ERR_CMD_BASE+0x44)
#define	NL829_ERR_END_REC_KEY		(NL829_ERR_CMD_BASE+0x45)
#define NL829_ERR_SCAN_ANIMATION    (NL829_ERR_CMD_BASE+0x46)

//新增SP10_T命令帧的定义
#define	SP10_T_OFFSET_STX			(0)
#define	SP10_T_LEN_STX				(1)
#define	SP10_T_OFFSET_DATALEN		(SP10_T_OFFSET_STX+SP10_T_LEN_STX)	//(1)
#define	SP10_T_LEN_DATALEN			(2)
#define	SP10_T_OFFSET_DATA			(SP10_T_OFFSET_DATALEN+SP10_T_LEN_DATALEN)	//(3)
#define	SP10_T_LEN_CMD				(1)
#define	SP10_T_LEN_ETX				(1)
#define	SP10_T_LEN_LRC				(1)
#define	SP10_T_LEN_FRAMEHEAD		(SP10_T_LEN_STX+SP10_T_LEN_DATALEN)	//(3)
#define	SP10_T_LEN_FRAMETAIL		(SP10_T_LEN_ETX+SP10_T_LEN_LRC)	//(2)
#define	SP10_T_OFFSET_ARGS			SP10_T_LEN_CMD	//这里的参数偏移是相对于data域而言的,而非在frame域中的偏移
#define	SP10_T_LEN_STATUS			(1)
#define	SP10_T_MAXLEN_DATA			(10245)
#define	SP10_T_MAXLEN_FRAME			(SP10_T_MAXLEN_DATA+SP10_T_LEN_FRAMEHEAD+SP10_T_LEN_FRAMETAIL)	//(10250)	 
#define	SP10_T_TIMEOUT_BASE			(20)	//按最低BPS300来算MAXLEN_DATA/30,故定为20,但这个时间只考虑传输时间,未考虑外设其它运算的时间
//SP10_T系列状态码
#define	SP10_T_SUCC					NL829_SUCC
#define	SP10_T_FAIL					NL829_FAIL
#define	SP10_T_ARGERR				NL829_ARGERR
//
#define	SP10_T_2BYTESTOUSHORT       NL829_2BYTESTOUSHORT
//命令定义
#define SP10_T_HANDSHAKE_REQUEST       ("\xA0")
#define SP10_T_HANDSHAKE_RESPONSE      ("\xB0")
#define SP10_T_FRONT_STATUS_INFORM     ("\xA1")
#define SP10_T_FRONT_STATUS_APPENDLEN    (4)
#define SP10_T_FRONT_STATUS_RESPONSE   ("\xB1")
#define SP10_T_SIGN_INPUT_REQUEST      ("\xA2")
#define SP10_T_SIGN_INPUT_APPENDLEN      (8)
#define SP10_T_SIGN_SUCC_RESPONSE      ("\xB2")
#define SP10_T_SIGN_FAIL_RESPONSE      ("\xC2")
#define SP10_T_SIGN_END_REQUEST        ("\xA3")
#define SP10_T_SIGN_END_RESPONSE       ("\xB3")
#define SP10_T_BULK_TRANSFER_REQUEST   ("\xA4")
#define SP10_T_BULK_TRANSFER_RESPONSE  ("\xB4")
#define SP10_T_BULK_END_REQUEST        ("\xA5")
#define SP10_T_BULK_END_RESPONSE       ("\xB5")
#define SP10_T_BULK_TRANSFER_SUCC      ("\xA8")
#define SP10_T_BULK_TRANSFER_FAIL      ("\xA9")
#define SP10_T_BULK_TRANSFER_APPENDLEN   (3)
#define SP10_T_SWITCH_SIGN_MODE        ("\xF3")
#define SP10_T_SWITCH_MODE_APPENDLEN     (1)
#define SP10_T_SIGN_STANDBY_IMAGE      ("\xF5")
#define SP10_T_SET_SIGN_TIMEOUT        ("\xF7")
#define SP10_T_SET_TIMEOUT_APPENDLEN     (2)
#define SP10_T_SET_SIGN_NUM            ("\xF8")
#define SP10_T_SET_SIGN_WRITING        ("\xF9")
#define SP10_T_SET_IMAGE_SIZE          ("\xE3")
#define SP10_T_IMAGE_SIZE_APPENDLEN      (4)
#define SP10_T_SET_IMAGE_BACKGROUND    ("\xE4")
#define SP10_T_READ_WAVE_DATA          ("\xFE")  //目前未支持
#define SP10_T_READ_WAVE_APPENDLEN       (4)
#define SP10_T_RESPONSE_STATUS_SUCC    (0x00)
#define SP10_T_RESPONSE_STATUS_FAIL    (0xFE)

//错误码定义
//定义帧层收发的错误码
#define	SP10_T_ERR_FRAME_BASE		    (0x1c00)	//不与底层已定义的错误返回码冲突
//将各种具体接收错误具体定义出来
#define	SP10_T_ERR_FRAME_STX			(SP10_T_ERR_FRAME_BASE+0x01)
#define	SP10_T_ERR_FRAME_DATALEN1	    (SP10_T_ERR_FRAME_BASE+0x02)
#define	SP10_T_ERR_FRAME_DATALEN2	    (SP10_T_ERR_FRAME_BASE+0x03)	//表征DATALEN太小或太大
#define	SP10_T_ERR_FRAME_DATA		    (SP10_T_ERR_FRAME_BASE+0x04)
#define	SP10_T_ERR_FRAME_ETX			(SP10_T_ERR_FRAME_BASE+0x05)
#define	SP10_T_ERR_FRAME_LRC			(SP10_T_ERR_FRAME_BASE+0x06)
#define	SP10_T_ERR_FRAME_SND			(SP10_T_ERR_FRAME_BASE+0x07)
#define	SP10_T_ERR_FRAME_UNPACK		    (SP10_T_ERR_FRAME_BASE+0x08)
//定义命令接口层的错误码
#define	SP10_T_ERR_CMD_BASE			        (0x1d00)
#define	SP10_T_ERR_HANDSHAKE_RESPONSE		(SP10_T_ERR_CMD_BASE+0x01)
#define	SP10_T_ERR_HANDSHAKE_APPEND		    (SP10_T_ERR_CMD_BASE+0x02)
#define SP10_T_ERR_FRONT_STATUS_RESPONSE    (SP10_T_ERR_CMD_BASE+0x03)
#define SP10_T_ERR_SIGN_RESPONSE		    (SP10_T_ERR_CMD_BASE+0x04)
#define SP10_T_ERR_SIGN_FAIL_APPENDLEN		(SP10_T_ERR_CMD_BASE+0x05) 
#define SP10_T_ERR_SIGN_END_RESPONSE		(SP10_T_ERR_CMD_BASE+0x06)
#define SP10_T_ERR_SIGN_END_APPENDLEN	    (SP10_T_ERR_CMD_BASE+0x07)
#define SP10_T_ERR_BULK_TRANSFER_RESPONSE	(SP10_T_ERR_CMD_BASE+0x08)
#define SP10_T_ERR_BULK_END_RESPONSE		(SP10_T_ERR_CMD_BASE+0x09)
#define SP10_T_ERR_BULK_END_APPENDLEN		(SP10_T_ERR_CMD_BASE+0x0a)
#define SP10_T_ERR_SET_RESPONSE_STATUS		(SP10_T_ERR_CMD_BASE+0x0b)

//SP100  状态码返回值判断
#define	SP100_GETRESPVAL              		NL829_2BYTESTOUSHORT
#define	SP100_RESP_SUCC				(0x3030) //00
#define	SP100_GENERAl_ERROR		(0x3032) //02
#define	SP100_PIN_CANCELLED			(0x3034) //04
#define	SP100_BAD_KEY_TAG			(0x3432) //42
#define	SP100_BAD_MASTER_KEY		(0x3433) //43
#define	SP100_CUSTOMER_CARD_ERR	(0x3130) //10
#define	SP100_BAD_DATA_LEN			(0x3435) //45
#define	SP100_INVALID_BLOCK			(0x3436) //46
#define	SP100_BAD_KEY_INDEX		(0x3433) //43
#define	SP100_INVALID_CMD			(0x3034) //04
#define	SP100_INVALID_PARA			(0x3035) //05
#define	SP100_INVALID_CMDPARA		(0x3031) //01
#define	SP100_CMD_FAILED			(0x3032) //02
#define	SP100_READER_NOT_CONFIG	(0x3033) //03
#define	SP100_INVALID_CMDSEQ		(0x3034) //04
#define	SP100_CARD_NOT_PRESENT	(0x3130) //10
//新增SP100命令帧的定义
#define	SP100_OFFSET_STX			(0)
#define	SP100_LEN_STX				(1)
#define	SP100_OFFSET_DATALEN		(SP100_OFFSET_STX+SP100_LEN_STX)	//(1)
#define	SP100_LEN_DATALEN			(2)
#define	SP100_OFFSET_DATA			(SP100_OFFSET_DATALEN+SP100_LEN_DATALEN)	//(3)
#define	SP100_LEN_CMD				(2)
#define	SP100_LEN_SEPARATOR		(1)
#define	SP100_LEN_ETX				(1)
#define	SP100_LEN_LRC				(1)
#define	SP100_LEN_FRAMEHEAD		(SP100_LEN_STX+SP100_LEN_DATALEN)	//(3)
#define	SP100_LEN_FRAMETAIL		(SP100_LEN_ETX+SP100_LEN_LRC)	//(2)
#define	SP100_OFFSET_ARGS			SP100_LEN_CMD	//这里的参数偏移是相对于data域而言的,而非在frame域中的偏移
#define	SP100_MAXLEN_DATA			(4096)//最长指令预计4k
#define	SP100_MAXLEN_FRAME		(SP100_MAXLEN_DATA+SP100_LEN_FRAMEHEAD+SP100_LEN_FRAMETAIL)	   
#define	SP100_TIMEOUT_BASE			(20)	//按最低BPS300来算MAXLEN_DATA/30,故定为20,但这个时间只考虑传输时间,未考虑外设其它运算的时间
#define    SP100_LEN_ACK_NAK			(1)
//SP100系列状态码
#define	SP100_SUCC					(0x0000)//NL829_SUCC
#define	SP100_FAIL					(0xFFFF)//NL829_FAIL
#define	SP100_ARGERR				(0x0001)//NL829_ARGERR
//命令定义
#define	 SP100_SEPERATOR_CMD					(0x2F)//("\x2F")
#define	 SP100_SEPERATOR_LEN					(1)
#define	 SP100_OPTION_SELECT_REQUEST			("\x33\x30") //30
#define	 SP100_OPTION_SELECT_RESPONSE			("\x33\x31") //31
#define	 SP100_PIN_ENTRY_REQUEST				("\x33\x32")
#define	 SP100_PIN_ENTRY_RESPONSE				("\x33\x33")
#define	 SP100_GET_DUKPT_KSN_REQUEST			("\x33\x34")
#define	 SP100_GET_DUKPT_KSN_RESPONSE			("\x33\x35")
#define	 SP100_DUKPT_PIN_ENTRY_REQUEST			("\x33\x36")
#define	 SP100_DUKPT_PIN_ENTRY_RESPONSE		("\x33\x37")
#define	 SP100_CANCEL_PIN_ENTRY_REQUEST		("\x33\x38")
#define	 SP100_ACTIVE_BUZZER_REQUEST			("\x33\x39")
#define	 SP100_DISPLAY_TEXT_REQUEST				("\x33\x43")	//3C
#define	 SP100_DISPLAY_IMAGE_REQUEST			("\x33\x44")	//3D
#define	 SP100_ACK_RESPONSE					("\x06")	//06
#define	 SP100_NAK_RESPONSE					("\x15")	//06
#define	 SP100_LOAD_IMAGE_REQUEST				("\x33\x45")	//3E
#define	 SP100_LOAD_IMAGE_RESPONSE			("\x33\x46")	//3F
#define	 SP100_LOAD_KEY_BLOCK_REQUEST			("\x35\x30")
#define	 SP100_LOAD_KEY_BLOCK_RESPONSE		("\x35\x31")
#define	 SP100_GET_KEY_CHECK_REQUEST			("\x35\x32")
#define	 SP100_GET_KEY_CHECK_RESPONSE			("\x35\x33")
#define	 SP100_GET_SERIAL_NUM_REQUEST			("\x36\x34")
#define	 SP100_GET_SERIAL_NUM_RESPONSE		("\x36\x35")
#define	 SP100_DATA_ENC_DEC_REQUEST			("\x38\x30")
#define	 SP100_DATA_ENC_DEC_RESPONSE			("\x38\x31")
#define	 SP100_MAC_GENERATION_REQUEST			("\x38\x43")  //8C
#define	 SP100_MAC_GENERATION_RESPONSE		("\x38\x44")  //8D
#define	 SP100_DEVICE_ATTRIBUTE_REQUEST			("\x39\x30")  //90
#define	 SP100_DEVICE_ATTRIBUTE_RESPONSE		("\x39\x31")  //91
#define	 SP100_CONFIG_LOAD_REQUEST				("\x39\x32")  //92
#define	 SP100_CONFIG_LOAD_RESPONSE			("\x39\x33")  //93
#define	 SP100_GET_CONFIG_REQUEST				("\x39\x34")  //94
#define	 SP100_GET_CONFIG_RESPONSE				("\x39\x35")  //95
#define	 SP100_AES_ENC_DEC_REQUEST				("\x38\x32")  //82
#define	 SP100_AES_ENC_DEC_RESPONSE			("\x38\x33")  //83
#define	 SP100_SM4_ENC_DEC_REQUEST				("\x38\x34")  //84
#define	 SP100_SM4_ENC_DEC_RESPONSE			("\x38\x35")  //85
//EMV相关卡片的命令
#define	 SP100_SMART_CARD_REQUEST				("\x48\x30")  //H0
#define	 SP100_SMART_CARD_RESPONSE			("\x48\x31")  //H1
//Function ID
#define	 SP100_FUNCTION_ID_LEN					(1)
#define	 SP100_INIT_READER						(0x01)
#define	 SP100_CHECK_READER						(0x02)
#define	 SP100_START_TRANS						(0x20)
#define	 SP100_PROCESS_TRANS					(0x21)
#define	 SP100_STOP_TRANS						(0x22)
#define	 SP100_ACTIVATE_FIELD					(0x30)
#define	 SP100_CHECK_CARD						(0x31)
#define	 SP100_EXCHANGE_APDU					(0x32)
#define	 SP100_DEACTIVATE_FIELD					(0x33)
#define	 SP100_FLASH_LED						(0x34)
#define	 SP100_EXCHANGE_APDU_PLAINTEXT		(0x35)
#define	 SP100_REBOOT_REQUEST					("\x41\x32")  //A2
#define	 SP100_REBOOT_RESPONSE					("\x41\x33")  //A3

//错误码定义
//定义帧层收发的错误码
#define	SP100_ERR_FRAME_BASE		   	 	(0x1e00)	//不与底层已定义的错误返回码冲突
//将各种具体接收错误具体定义出来
#define	SP100_ERR_FRAME_STX				(SP100_ERR_FRAME_BASE+0x01)
#define	SP100_ERR_FRAME_DATALEN1	    		(SP100_ERR_FRAME_BASE+0x02)
#define	SP100_ERR_FRAME_DATALEN2	    		(SP100_ERR_FRAME_BASE+0x03)	//表征DATALEN太小或太大
#define	SP100_ERR_FRAME_DATA		    		(SP100_ERR_FRAME_BASE+0x04)
#define	SP100_ERR_FRAME_ETX				(SP100_ERR_FRAME_BASE+0x05)
#define	SP100_ERR_FRAME_LRC				(SP100_ERR_FRAME_BASE+0x06)
#define	SP100_ERR_FRAME_SND				(SP100_ERR_FRAME_BASE+0x07)
#define	SP100_ERR_FRAME_UNPACK			(SP100_ERR_FRAME_BASE+0x08)
#define	SP100_ERR_ACK_NAK					(SP100_ERR_FRAME_BASE+0x09)
//定义命令接口层的错误码
#define	SP100_ERR_CMD_BASE					(0x1f00)
#define 	SP100_ERR_OPTION_SELECT			(SP100_ERR_CMD_BASE+0x01)
#define 	SP100_ERR_PIN_ENTRY					(SP100_ERR_CMD_BASE+0x02)
#define 	SP100_ERR_GET_DUKPT_KSN			(SP100_ERR_CMD_BASE+0x03)
#define 	SP100_ERR_DUKPT_PIN_ENTRY			(SP100_ERR_CMD_BASE+0x04)
#define 	SP100_ERR_CANCEL_PIN_ENTRY			(SP100_ERR_CMD_BASE+0x05)
#define 	SP100_ERR_ACTIVE_BUZZER				(SP100_ERR_CMD_BASE+0x06)
#define 	SP100_ERR_DISPLAY_TEXT				(SP100_ERR_CMD_BASE+0x07)
#define 	SP100_ERR_DISPLAY_IMAGE			(SP100_ERR_CMD_BASE+0x08)
#define 	SP100_ERR_LOAD_IMAGE				(SP100_ERR_CMD_BASE+0x09)
#define 	SP100_ERR_LOAD_KEY_BLOCK			(SP100_ERR_CMD_BASE+0x0a)
#define 	SP100_ERR_GET_KEY_CHECK			(SP100_ERR_CMD_BASE+0x0b)
#define 	SP100_ERR_GET_SERIAL_NUM			(SP100_ERR_CMD_BASE+0x0c)
#define 	SP100_ERR_DATA_ENC_DEC				(SP100_ERR_CMD_BASE+0x0d)
#define 	SP100_ERR_MAC_GENERATION			(SP100_ERR_CMD_BASE+0x0e)
#define 	SP100_ERR_DEVICE_ATTRIBUTE			(SP100_ERR_CMD_BASE+0x0f)
#define 	SP100_ERR_CONFIG_LOAD				(SP100_ERR_CMD_BASE+0x10)
#define 	SP100_ERR_AES_ENC_DEC				(SP100_ERR_CMD_BASE+0x11)
#define 	SP100_ERR_INIT_READER				(SP100_ERR_CMD_BASE+0x12)
#define 	SP100_ERR_CHECK_READER				(SP100_ERR_CMD_BASE+0x13)
#define 	SP100_ERR_START_TRANS				(SP100_ERR_CMD_BASE+0x14)
#define 	SP100_ERR_PROCESS_TRANS			(SP100_ERR_CMD_BASE+0x15)
#define 	SP100_ERR_STOP_TRANS				(SP100_ERR_CMD_BASE+0x16)
#define 	SP100_ERR_ACTIVATE_FIELD			(SP100_ERR_CMD_BASE+0x17)
#define 	SP100_ERR_CHECK_CARD				(SP100_ERR_CMD_BASE+0x18)
#define 	SP100_ERR_EXCHANGE_APDU			(SP100_ERR_CMD_BASE+0x19)
#define 	SP100_ERR_DEACTIVATE_FIELD 			(SP100_ERR_CMD_BASE+0x1a)
#define 	SP100_ERR_FLASH_LED					(SP100_ERR_CMD_BASE+0x1b)
#define 	SP100_ERR_EXCHANGE_APDU_PLAINTEXT (SP100_ERR_CMD_BASE+0x1c)
#define 	SP100_ERR_REBOOT					(SP100_ERR_CMD_BASE+0x1d)
//porting from POS's define.h
#define NORMAL_TEXT	    0       //正常显示
#define REVERSE_TEXT	1       //反向显示

/*---------------functions declaration--------------------------*/
void little2big_ushort(ushort src, ushort *des);
int NL829_pack_data(uchar *data, int datalen, uchar *frame);
int NL829_unpack_data(uchar *data, int datalen, uchar *status, uchar *append);
ushort NL829_SetBPS(uchar bps);
ushort NL829_send_frame(uchar *cmdstr, int cmdlen);
ushort NL829_recv_frame(uchar *data, int *datalen, ushort timeout);
ushort NL829_frame_factory(uchar *data, int datalen, uchar *status, uchar *append, int *appendlen, ushort timeout);
ushort NL829_pack_PP60cmd(uchar *PP60cmd, int PP60cmdlen);
ushort NL829_get_PP60rsp(ushort sec, ushort inlen, uchar *out, ushort *outlen);
ushort NL829_cnnt_PP60(void);
//ushort NL829_SetBPS_PP60(uchar type, uchar bps, uchar *ret_bps);
//int conf_NL829_bps(void);
int SP10_T_pack_data(uchar *data, int datalen, uchar *frame);
int SP10_T_unpack_data(uchar *data, int datalen, uchar *answer, uchar *append);
ushort SP10_T_send_frame(uchar *cmdstr, int cmdlen);
ushort SP10_T_recv_frame(uchar *data, int *datalen, ushort timeout);
ushort SP10_T_frame_factory(uchar *data, int datalen, uchar *answer, uchar *append, int *appendlen, ushort timeout);
#endif

